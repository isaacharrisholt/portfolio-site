---
import { getCollection } from 'astro:content'
import PostList from '../../components/PostList.astro'
import { Polar } from '@polar-sh/astro'

const blogEntries = await getCollection('posts')

// Upload to Polar
if (import.meta.env.MODE === 'production' && false) {
  // TODO: Enable once SDK is updated
  console.log('uploading to Polar')
  const polar = new Polar({ accessToken: import.meta.env.POLAR_SH_KEY })
  const { data: uploaded, error: polarUploadError } = await polar
    .upload(blogEntries, {
      organizationName: 'isaacharrisholt',
    })
    .filter(({ entry }) => !!entry.data.polar)
    // Process images
    .transform(({ article, entry }) => {
      // Add featured image and subtitle
      if (entry.data.polar?.include_image) {
        article.body = `![](https://ihh.dev${entry.data.image.src})\n${article.body}`
      }
      if (entry.data.subtitle && entry.data.polar?.include_subtitle) {
        article.body = `## ${entry.data.subtitle}\n\n${article.body}`
      }

      // Replace local images with prod URLs
      article.body = article.body.replaceAll('../../../public', 'https://ihh.dev')
      return article
    })
    // Process remaining metadata
    .transform(({ article, entry, existing }) => {
      const polar_data = entry.data.polar
      return {
        ...article,
        title: entry.data.title,
        published_at: entry.data.date.toISOString(),
        set_published_at: entry.data.date.toISOString() !== existing?.published_at,
        visibility: polar_data?.visibility || 'public',
        notify_subscribers: polar_data?.notify_subscribers || false,
        paid_subscribers_only: polar_data?.paid_subscribers_only || false,
        is_pinned: polar_data?.is_pinned || false,
        slug: entry.slug,
      }
    })

  if (polarUploadError) {
    console.error('failed to upload to polar', polarUploadError)
    throw polarUploadError
  }

  const totalArticles = uploaded.created.length + uploaded.updated.length
  console.log(`uploaded ${totalArticles} articles to Polar`)
}

const allPosts = blogEntries.sort((a, b) => {
  return new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf()
})
---

<PostList title="Blog" posts={allPosts} />
